<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://jakarta.ee/xml/ns/jakartaee" xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd" id="WebApp_ID" version="5.0">
  <display-name>mustHaveJSP</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.jsp</welcome-file>
    <welcome-file>default.htm</welcome-file>
  </welcome-file-list>
  
	<!-- 2.5 application 객체 - 예제 2-10 - 초기화 매개변수 추가 -->
	<context-param>
		<param-name>INIT_PARAM</param-name>
		<param-value>web.xml에 저장한 초기화 매개변수</param-value>
	</context-param>
	
	<!-- 5.6.4 연결 설정 개선 - 예제 5-8 web.xml에 오라클 접속 정보 입력 -->
	<context-param>
		<param-name>OracleDriver</param-name> <!-- 드라이버 이름 -->
		<param-value>oracle.jdbc.OracleDriver</param-value>
	</context-param>
	<context-param>
		<param-name>OracleURL</param-name> <!-- 접속 URL -->
		<param-value>jdbc:oracle:thin:@localhost:1521:orcl</param-value>
	</context-param>
	<context-param>
		<param-name>OracleId</param-name> <!-- 계정 ID -->
		<param-value>musthave</param-value>
	</context-param>
	<context-param>
		<param-name>OraclePwd</param-name> <!-- PWD -->
		<param-value>1234</param-value>
	</context-param>
	
	<!-- 9.6.1 설정값 관리 - 예제 9-3 페이징 설정값 -->
	<context-param>
		<param-name>POSTS_PER_PAGE</param-name>
		<param-value>10</param-value>
	</context-param>
	<context-param>
		<param-name>PAGES_PER_BLOCK</param-name>
		<param-value>5</param-value>
	</context-param>
	
	<!-- 예제 16-3 채팅 서버에 접속하기 위한 요청 URL -->
	<!-- 요청명은 서버의 환경에 따라 달라지는 정보이므로, 컨텍스트 초기화 매개변수로 관리하는 것이 좋음. 실제 서비스용으로 배포할 때 web.xml만 수정하면 되기 때문. -->
	<context-param>
		<param-name>CHAT_ADDR</param-name>
		<param-value>ws://localhost:8080/mustHaveJSP</param-value>
	</context-param>
	
	<!-- 6.2 세션 설정, 확인, 삭제 - 예제6-1 세션 유지 시간 설정 -->
	<session-config>
		<session-timeout>20</session-timeout> <!-- 시간 단위를 분 단위로 설정 -->
	</session-config>
	
	<!-- 7.4.4 한글 인코딩 문제 해결 - 예제7-9 모든 페이지에 캐릭터 인코딩 설정하기 -->
	<filter>
		<!-- 필터 이름 정의 -->
	<filter-name>SetCharEncoding</filter-name>
	<!-- 사용할 클래스 -->
	<filter-class>org.apache.catalina.filters.SetCharacterEncodingFilter</filter-class>
		<!-- 클래스에 전달할 매개변수 -->
			<init-param>
				<param-name>encoding</param-name>
				<param-value>utf-8</param-value>
			</init-param>
	</filter>
	<!-- 요청 URL과 필터 매핑 -->
	<filter-mapping>
		<filter-name>SetCharEncoding</filter-name>
		<!-- 웹 애플리케이션에 들어오는 모든 요청에 setCharEncoding 필터 적용 -->
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	
	<!-- 예제 15-2 JSP 파일에 필터를 매핑 -->
	<filter>
		<filter-name>BasicFilter</filter-name>
		<filter-class>filter.BasicFilter</filter-class>
		<init-param>
			<param-name>FILTER_INIT_PARAM</param-name>
			<param-value>필터 초기화 매개변수</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>BasicFilter</filter-name>
		<url-pattern>/15FilterListener/BasicFilter.jsp</url-pattern>
	</filter-mapping>
	
	<!-- 예제 15-10 리스너 클래스 등록 -->
	<listener>
		<!-- listener-class 요소에 패키지를 포함한 클래스명을 입력하기만 하면 리스너 등록이 완료됨 -->
		<listener-class>listener.ContextListener</listener-class>
	</listener>
	
	<!-- 12.5.1  web.xml에서 매핑 - 예제 12-2 web.xml에 매칭 정보 추가 -->
	<servlet>
		<servlet-name>HelloServlet</servlet-name>
		<servlet-class>servlet.HelloServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>HelloServlet</servlet-name>
		<url-pattern>/12Servlet/HelloServlet.do</url-pattern>
	</servlet-mapping>
	<!-- 예제 12-7 -->
	<servlet>
		<servlet-name>DirectServletPrint</servlet-name>
		<servlet-class>servlet.DirectServletPrint</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>DirectServletPrint</servlet-name>
		<url-pattern>/12Servlet/DirectServletPrint.do</url-pattern>
	</servlet-mapping>
	<!-- 예제 12-14 -->
	<servlet>
		<servlet-name>MemberAuth</servlet-name>
		<servlet-class>servlet.MemberAuth</servlet-class>
		<!-- 해당 서블릿에서 사용할 초기화 매개변수 지정 -->
		<init-param>
			<param-name>admin_id</param-name>
			<param-value>nakja</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>MemberAuth</servlet-name>
		<url-pattern>/12Servlet/MemberAuth.mvc</url-pattern>
	</servlet-mapping>
	<!-- 예제 14-4 -->
	<servlet>
		<servlet-name>MVCBoardList</servlet-name>
		<servlet-class>model2.mvcboard.ListController</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>MVCBoardList</servlet-name>
		<url-pattern>/mvcboard/list.do</url-pattern>
	</servlet-mapping>
	<!-- 예제 14-7 -->
	<servlet>
		<servlet-name>MVCBoardWrite</servlet-name>
		<servlet-class>model2.mvcboard.WriteController</servlet-class>
		<multipart-config>
			<max-file-size>1048576</max-file-size> <!-- 1MB -->
			<max-request-size>10485760</max-request-size> <!-- 10MB -->
		</multipart-config>
	</servlet>
	<servlet-mapping>
		<servlet-name>MVCBoardWrite</servlet-name>
		<url-pattern>/mvcboard/write.do</url-pattern>
	</servlet-mapping>
	
	
<!-- 이와 같은 에러 페이지 처리는 실제 서비스에서 오류 발생 시 코드가 고객에게 그대로 노출되는 문제를 피하기 위해 사용하는 것이므로,
개발 시에는 자세한 에러 메시지를 확인하면서 디버깅해야 하므로 에러 페이지 지정은 개발이 완료된 후 하는 것이 좋음.   
	<error-page>
  		<error-code>404</error-code>
  		<location>/02ImplicitObject/Exception.jsp</location>
	</error-page>
    <error-page>
  		<error-code>405</error-code>
  		<location>/02ImplicitObject/Exception.jsp</location>
	</error-page>
	<error-page>
  		<error-code>500</error-code>
  		<location>/02ImplicitObject/Exception.jsp</location>
  	</error-page>
-->
</web-app>